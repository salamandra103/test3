import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head'
import { Typography, Button, Card, Input, List } from 'antd';

import {Comment} from '../../components/Comment'

import {Post, Comment as CommentType} from "../../models/global";

import styles from './Post.module.scss'
import { GetServerSidePropsContext, GetServerSidePropsResult } from 'next';

interface Props {
    post: Post
}

const fetchPost = async (postId: string | string[]): Promise<Post | void> => {
    return fetch(`${process.env.NEXT_PUBLIC_VERCEL_URL}/api/posts/?id=${postId}`, {
        method: "GET"
    }).then(async res => res.ok ? await res.json() : new Error(res.statusText))
        .then(({ data }: {data: Post}) => {
            return data;
        }).catch(err => {
          console.error(err);
        });
}

export default function PostPage(props: Props) {
    const {post} = props;
    
    const router = useRouter();

    const [isCommentLoading, setIsCommentLoading] = useState(false);
    const [commentText, setCommentText] = useState('');
    const [comments, setComments] = useState<CommentType[]>([])

    const fetchComments = (id: string) => {
        setIsCommentLoading(true);
        fetch(`/api/comments/?postId=${id}`, {
            method: "GET"
        }).then(res => res.json())
            .then(({data}: {data: CommentType[]}) => {
                setComments(data)
            }).catch(err => {
                throw err as Error
            }).finally(() => {
                setIsCommentLoading(false);
            })
    }

    const deleteCommentHandler = (id: CommentType['_id'] ) => {
        fetch(`/api/comments?id=${id}`, {
            method: 'DELETE',
        }).then(async res => {
            if (res.ok) {
                fetchComments(String(post._id));
            } else {
                res.statusText
                throw new Error(res.statusText)
            }
        }).catch(err => {
            console.error(err);
        })
    };

    const editCommentHandler = (id: CommentType['_id'], text: string) => {
        fetch(`/api/comments?id=${id}`, {
            method: 'PUT',
            body: JSON.stringify({
                id,
                text
            })
        }).then(async res => {
            if (res.ok) {
                fetchComments(String(post._id));
            } else {
                throw new Error(res.statusText)
            }
        }).catch(err => {
            console.error(err);
        })
    }

    const createComment = () => {
        fetch('/api/comments/', {
            method: 'POST',
            body:  JSON.stringify({
                text: commentText,
                postId: Array.isArray(router.query.id) ? router.query.id[0] : router.query.id
            })
        }).then(async res => {
            if (res.ok) {
                fetchComments(String(post._id));
            } else {
                res.statusText
                throw new Error(res.statusText)
            }
        }).catch(err => {
            throw err as Error;
        });
    }

    useEffect(() => {
        fetchComments(String(post._id));   
    }, [])

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className={styles.post}>
            <>
                        <Button className='post__back' type="primary" onClick={() => router.back()}>Back on previous page</Button>

                        <Card title={<Typography.Title level={3}>{post.caption}</Typography.Title>} className='post__card'>
                            <div className="post__wrapper">
                                <Typography.Text className='post__text'>{post.text}</Typography.Text>
                                <Input.TextArea value={commentText} onInput={(e) => setCommentText(e.currentTarget.value)} style={{marginBottom: '15px'}}/>
                                <Button  type="primary" onClick={() => createComment()}>Add comment</Button>
                                <List
                                    style={{width: '100%', margin: '15px 0'}}
                                    itemLayout="horizontal"
                                    loading={isCommentLoading}
                                    bordered={true}
                                    dataSource={comments}
                                    header={
                                        <Typography.Title level={4}>Comments:</Typography.Title>
                                    }
                                    renderItem={(item) => (
                                        <List.Item key={String(item._id)} >
                                            <Comment key={String(item._id)} onEdit={(text) => editCommentHandler(item._id, text)} onDelete={() => deleteCommentHandler(item._id)} comment={item}/>
                                        </List.Item>
                                       
                                    )}
                                />
                            </div>
                         
                        </Card>
                    </> 
            </div>
        </>     
    )
}

export async function getServerSideProps(context: GetServerSidePropsContext): Promise<GetServerSidePropsResult<Props | Record<string, unknown>>>  {
    if (context.query.id) {
        const post = await fetchPost(context.query.id);
        
        if (post) {
            return {
                props: {
                    post
                }
            }
        }
    }
    return {
        notFound: true,
        props: {}
    };
  
}