import { useEffect, useState, useRef } from 'react';

import Head from 'next/head'
import Link from 'next/link'

import { List, Typography, Button } from 'antd'

import { PostCreateForm } from '../containers/PostCreateForm'

import { Post } from '../models/global'
import styles from './Main.module.scss'

export default function Home() {
  const [isVisibleEditPostForm, setIsVisibleEditPostForm] = useState(false);
  const [isFetchLoading, setIsFetchLoading] = useState(false);
  const [isCreateLoading, setIsCreateLoading] = useState(false);
  const [deletingPostIdes, setDeletingPostIdes] = useState<(string | number)[]>([]);
  const [posts, setPosts] = useState<Post[]>([]);
  const [currentPost, setCurrentPost] = useState<Post | null>(null);

  const editFormAnimationTimer = useRef<ReturnType<typeof setTimeout> | string | number | undefined>()

  const fetchPosts = () => {
    setIsFetchLoading(true);
    return fetch('/api/posts/', {
      method: "GET"
    }).then(res => res.json())
      .then(({ data }: {data:Post[]}) => setPosts(data))
      .catch(err => {
        console.error(err);
      })
      .finally(() => setIsFetchLoading(false))
  }

  const createPost = async (values: any) => {
    setIsCreateLoading(true);
    return fetch('/api/posts/', {
      method: currentPost ? 'PUT' : 'POST',
      body: currentPost ? JSON.stringify({ ...values, '_id': currentPost._id }) : JSON.stringify(values)
    }).then(async res => {
      if (res.ok) {
        const { data } = await res.json()
        if (currentPost) {
          setCurrentPost(data);
        }
        fetchPosts();
      } else {
        throw new Error(res.statusText);
      }
    })
    .catch(err => {
      throw err as Error;
    })
    .finally(() => setIsCreateLoading(false))
  }

  const deletePost = (id: string) => {
    setDeletingPostIdes([...deletingPostIdes, id]);
    fetch(`/api/posts?id=${id}`, {
      method: 'DELETE',
    }).then(res => {
      if (res.ok) {
        fetchPosts();
      } else {
        throw new Error(res.statusText);
      }
    }).catch(err => {
      console.error(err);
    }).finally(() => {
      setDeletingPostIdes(deletingPostIdes.filter(item => item !== id));
      setIsCreateLoading(false)
    });
  }

  const editPostButtonHandler = (post: Post | null) => {
    if (currentPost && currentPost._id !== post?._id || !currentPost && isVisibleEditPostForm) {
      clearTimeout(editFormAnimationTimer.current)
      setIsVisibleEditPostForm(false);
      editFormAnimationTimer.current = setTimeout(() => {
        setIsVisibleEditPostForm(true);
      }, 300)
    } else {
      setIsVisibleEditPostForm(true)
    }
    setCurrentPost(post);
  }

  const createPostButtonHandler = () => {
    if (currentPost) {
      clearTimeout(editFormAnimationTimer.current)
      setIsVisibleEditPostForm(false);
      editFormAnimationTimer.current = setTimeout(() => {
        setIsVisibleEditPostForm(true);
      }, 300)
    } else {
      setIsVisibleEditPostForm(true)
    }
    setCurrentPost(null);
  }
  
  const closeEditPostForm = () => {
    setIsVisibleEditPostForm(false);
    setCurrentPost(null);
  }

  useEffect(() => {
    fetchPosts();
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <PostCreateForm initialValues={currentPost} isVisible={isVisibleEditPostForm} onClose={closeEditPostForm} onSubmit={createPost} isLoading={isCreateLoading} />
        <List
          itemLayout="horizontal"
          loading={isFetchLoading}
          bordered={true}
          dataSource={posts}
          header={
            <div className="main__header">
              <Typography.Title level={2}>PostS</Typography.Title>
              <Button type="primary" onClick={() => createPostButtonHandler()}>Create Post</Button>
            </div>
          }
          renderItem={(item) => (
            <List.Item key={String(item._id)} className='main__item'>
              <List.Item.Meta
                title={<Link href={`/post/${item._id}`}>{item.caption}</Link>}
                description={<p className='main__description'>{item.text.substring(0, 400)}</p>}
              />
              <div className="main__item-buttons">
                <Button type="primary" onClick={() => editPostButtonHandler(item)}>Edit</Button>
                <Button type="primary" disabled={!!deletingPostIdes.find(deletingItem => deletingItem === String(item._id))} danger onClick={() => deletePost(String(item._id))}>Delete</Button>
              </div>
            </List.Item>
          )}
        />
        
      </main>
    </>
  )
}
